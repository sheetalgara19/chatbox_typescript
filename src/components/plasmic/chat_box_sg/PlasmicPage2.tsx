// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: kxYQJMR2DWAu7aqSqgvLQT
// Component: h8QEiJhmAc
import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import TextInput from "../../TextInput"; // plasmic-import: 7AnWSkOwoll/component
import Button from "../../Button"; // plasmic-import: Lb6CveIJlgg/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_chat_box_sg.module.css"; // plasmic-import: kxYQJMR2DWAu7aqSqgvLQT/projectcss
import sty from "./PlasmicPage2.module.css"; // plasmic-import: h8QEiJhmAc/css

import SearchsvgIcon from "./icons/PlasmicIcon__Searchsvg"; // plasmic-import: pOIvns3y99V/icon
import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: 6_gQiMzejOq/icon
import Icon3Icon from "./icons/PlasmicIcon__Icon3"; // plasmic-import: yHjrSsy6EVh/icon

export type PlasmicPage2__VariantMembers = {};

export type PlasmicPage2__VariantsArgs = {};
type VariantPropType = keyof PlasmicPage2__VariantsArgs;
export const PlasmicPage2__VariantProps = new Array<VariantPropType>();

export type PlasmicPage2__ArgsType = {};
type ArgPropType = keyof PlasmicPage2__ArgsType;
export const PlasmicPage2__ArgProps = new Array<ArgPropType>();

export type PlasmicPage2__OverridesType = {
  root?: p.Flex<"div">;
  textInput?: p.Flex<typeof TextInput>;
  send?: p.Flex<typeof Button>;
  textbox?: p.Flex<typeof TextInput>;
};

export interface DefaultPage2Props {
  className?: string;
}

function PlasmicPage2__RenderFunc(props: {
  variants: PlasmicPage2__VariantsArgs;
  args: PlasmicPage2__ArgsType;
  overrides: PlasmicPage2__OverridesType;

  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;

  return (
    <React.Fragment>
      {}
      {}

      <div className={projectcss.plasmic_page_wrapper}>
        {true ? (
          <p.Stack
            as={"div"}
            data-plasmic-name={"root"}
            data-plasmic-override={overrides.root}
            data-plasmic-root={true}
            data-plasmic-for-node={forNode}
            hasGap={true}
            className={classNames(
              projectcss.all,
              projectcss.root_reset,
              projectcss.plasmic_default_styles,
              sty.root
            )}
          >
            <TextInput
              data-plasmic-name={"textInput"}
              data-plasmic-override={overrides.textInput}
              className={classNames("__wab_instance", sty.textInput)}
            />

            <Button
              data-plasmic-name={"send"}
              data-plasmic-override={overrides.send}
              className={classNames("__wab_instance", sty.send)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__bNm0O
                )}
              >
                {"Send"}
              </div>
            </Button>

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___96VjG
              )}
            >
              {"Hi !!"}
            </div>
          </p.Stack>
        ) : null}
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "textInput", "textbox", "send"],
  textInput: ["textInput", "textbox"],
  send: ["send"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  textInput: typeof TextInput;
  send: typeof Button;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicPage2__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicPage2__VariantsArgs;
    args?: PlasmicPage2__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicPage2__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicPage2__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicPage2__ArgProps,
      internalVariantPropNames: PlasmicPage2__VariantProps
    });

    return PlasmicPage2__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicPage2";
  } else {
    func.displayName = `PlasmicPage2.${nodeName}`;
  }
  return func;
}

export const PlasmicPage2 = Object.assign(
  // Top-level PlasmicPage2 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    textInput: makeNodeComponent("textInput"),
    send: makeNodeComponent("send"),

    // Metadata about props expected for PlasmicPage2
    internalVariantProps: PlasmicPage2__VariantProps,
    internalArgProps: PlasmicPage2__ArgProps
  }
);

export default PlasmicPage2;
/* prettier-ignore-end */
